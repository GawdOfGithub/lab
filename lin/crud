#include <iostream>
using namespace std;

// Node structure for the linked list
struct Node {
    int data;
    Node* next;
};

// Function to print the linked list
void printList(Node* head) {
    Node* temp = head;
    while (temp != nullptr) {
        cout << temp->data << " ";
        temp = temp->next;
    }
    cout << endl;
}

// Function to insert data at the end of the linked list
void insertAtEnd(Node*& head, int newData) {
    Node* newNode = new Node();
    newNode->data = newData;
    newNode->next = nullptr;

    if (head == nullptr) {
        head = newNode;
        return;
    }

    Node* temp = head;
    while (temp->next != nullptr) {
        temp = temp->next;
    }
    temp->next = newNode;
}

// Function to insert data at the front of the linked list
void insertAtFront(Node*& head, int newData) {
    Node* newNode = new Node();
    newNode->data = newData;
    newNode->next = head;
    head = newNode;
}

// Function to insert data at a specific position in the linked list
void insertAtPosition(Node*& head, int newData, int position) {
    if (position == 0) {
        insertAtFront(head, newData);
        return;
    }

    Node* newNode = new Node();
    newNode->data = newData;

    Node* temp = head;
    for (int i = 0; i < position - 1 && temp != nullptr; ++i) {
        temp = temp->next;
    }

    if (temp == nullptr) {
        cout << "Invalid position. Data not inserted." << endl;
        return;
    }

    newNode->next = temp->next;
    temp->next = newNode;
}

// Function to delete data at a specific position in the linked list
void deleteAtPosition(Node*& head, int position) {
    if (head == nullptr) {
        cout << "List is empty. Cannot delete." << endl;
        return;
    }

    Node* temp = head;
    if (position == 0) {
        head = head->next;
        delete temp;
        return;
    }

    for (int i = 0; temp != nullptr && i < position - 1; ++i) {
        temp = temp->next;
    }

    if (temp == nullptr || temp->next == nullptr) {
        cout << "Invalid position. Data not deleted." << endl;
        return;
    }

    Node* nodeToDelete = temp->next;
    temp->next = nodeToDelete->next;
    delete nodeToDelete;
}

// Function to update data at a specific position in the linked list
void updateAtPosition(Node* head, int position, int newData) {
    Node* temp = head;
    for (int i = 0; i < position && temp != nullptr; ++i) {
        temp = temp->next;
    }

    if (temp != nullptr) {
        temp->data = newData;
    } else {
        cout << "Invalid position. Data not updated." << endl;
    }
}

// Function to update a specific value in the linked list
void updateValue(Node* head, int oldValue, int newValue) {
    Node* temp = head;
    while (temp != nullptr) {
        if (temp->data == oldValue) {
            temp->data = newValue;
            return;
        }
        temp = temp->next;
    }
    cout << "Value not found. Data not updated." << endl;
}

int main() {
    Node* head = nullptr;

    // Inserting at the end
    insertAtEnd(head, 10);
    cout << "Linked list after inserting at the end: ";
    printList(head);

    // Inserting at the front
    insertAtFront(head, 5);
    cout << "Linked list after inserting at the front: ";
    printList(head);

    // Inserting at a specific position
    insertAtPosition(head, 7, 1);
    cout << "Linked list after inserting at position 1: ";
    printList(head);

    // Deleting at a specific position
    deleteAtPosition(head, 1);
    cout << "Linked list after deleting at position 1: ";
    printList(head);

    // Updating at a specific position
    updateAtPosition(head, 1, 15);
    cout << "Linked list after updating at position 1: ";
    printList(head);

    // Updating a specific value
    updateValue(head, 5, 20);
    cout << "Linked list
